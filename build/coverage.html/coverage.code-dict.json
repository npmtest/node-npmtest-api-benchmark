{"/home/travis/build/npmtest/node-npmtest-api-benchmark/test.js":"/* istanbul instrument in package npmtest_api_benchmark */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/lib.npmtest_api_benchmark.js":"/* istanbul instrument in package npmtest_api_benchmark */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_api_benchmark = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_api_benchmark = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-api-benchmark && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_api_benchmark */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_api_benchmark\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_api_benchmark.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_api_benchmark.rollup.js'] =\n            local.assetsDict['/assets.npmtest_api_benchmark.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_api_benchmark.__dirname + '/lib.npmtest_api_benchmark.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/index.js":"'use strict';\n\nmodule.exports = require('./lib/api-benchmark');\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/api-benchmark.js":"'use strict';\n\nvar DebugHelper = require('./debug-helper');\nvar htmlConverter = require('./html-converter');\nvar sanitise = require('./sanitise');\nvar superagent = require('superagent');\nvar SuitesManager = require('./suites-manager');\n\nvar suites = {\n  start: function(services, endpoints, options, callback){\n\n    var parameters = sanitise.initialInput(services, endpoints, options, callback),\n        suites = new SuitesManager(superagent, new DebugHelper());\n\n    suites.setOptions(parameters.options)\n          .addEndpoints(parameters.endpoints)\n          .addServices(parameters.services)\n          .onBenchResults(parameters.callback)\n          .start();\n\n    return suites;\n  }\n};\n\nmodule.exports.compare = module.exports.measure = suites.start;\nmodule.exports.getHtml = htmlConverter.getHtml;\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/debug-helper.js":"'use strict';\n\nvar _ = require('underscore');\n\nmodule.exports = function(logger){\n\n  this.enabled = true;\n\n\tlogger = _.isUndefined(logger) ? console : logger;\n\tvar self = this;\n\n  return _.extend(this, {\n    shutUp: function(){\n      this.enabled = false;\n    },\n    log: function(message){\n      if(!this.enabled) {\n        return this;\n\t\t\t}\n\n      logger.log('======================================');\n      logger.log(message);\n      logger.log('');\n    },\n    simpleLog: function(message){\n\n      if(!this.enabled) {\n        return this;\n\t\t\t}\n\n      logger.log(message);\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/html-converter.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar _ = require('underscore');\n\nmodule.exports = {\n  getHtml: function(input, options, callback){\n\n    if(_.isFunction(options)){\n      callback = options;\n      options = {};\n    }\n\n    fs.readFile(path.join(__dirname, '../templates/report.html'), 'utf-8', function(err, template){\n\n      if(err) {\n        return callback(err);\n\t\t\t}\n\n      var obj = {\n        benchmark: input,\n        info: {\n          date: new Date(),\n          apiName: _.keys(input)[0]\n        }\n      };\n\n      var templateWithData = template.replace('{{ data }}', JSON.stringify(obj).replace(/<\\/script>/g, '</scr\"+\"ipt>'));\n\n      callback(null, templateWithData);\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/sanitise.js":"'use strict';\n\nvar _ = require('underscore');\n\nmodule.exports = {\n  endpoint: function(endpointName, endpoint){\n    var output = _.clone(endpoint);\n\n    if(_.isString(output)) {\n      output = { route: output };\n\t\t}\n\n    output.method = output.method || 'get';\n\n    return output;\n  },\n  initialInput: function(services, endpoints, options, callback){\n    var output = _.clone({\n      services: services,\n      endpoints: endpoints,\n      options: options,\n      callback: callback\n    });\n\n    if(_.isFunction(options)){\n      output.callback = options;\n      output.options = {};\n    }\n\n    return output;\n  },\n  options: function(options){\n    var output = options || {};\n\n   return _.extend(output, {\n      delay: output.delay || 0,\n      debug: output.debug || false,\n      maxTime: output.maxTime || 10,\n      minSamples: output.minSamples || 20,\n      maxConcurrentRequests: output.maxConcurrentRequests || 100,\n      runMode: output.runMode || 'sequence',\n      stopOnError: output.stopOnError !== undefined ? output.stopOnError : true\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/suites-manager.js":"'use strict';\n\nvar format = require('./format');\nvar RequestAgent = require('./request-agent');\nvar requestHandler = require('./request-handler');\nvar ResultsHandler = require('./results-handler');\nvar Runner = require('./runner');\nvar sanitise = require('./sanitise');\nvar settings = require('./settings');\nvar url = require('url');\nvar validator = require('./validator');\nvar _ = require('underscore');\n\nmodule.exports = function(agent, debugHelper){\n\n  this.options = {};\n  this.current = 0;\n  this.routes = [];\n  this.services = {};\n  this.requestAgent = new RequestAgent(agent);\n\n  return _.extend(this, {\n    addEndpoints: function(endpoints){\n      if(!this.validate(validator.checkEndpoints, endpoints)) {\n        return this;\n\t\t\t}\n\n      _.forEach(endpoints, function(endpoint, endpointName){\n        this.routes.push({\n          name: endpointName,\n          endpoint: sanitise.endpoint(endpointName, endpoint),\n          runner: new Runner(this.options)\n        });\n      }, this);\n\n      return this;\n    },\n    addServices: function(services){\n      if(!this.validate(validator.checkServices, services)) {\n        return this;\n\t\t\t}\n\n      this.services = services;\n\n      _.forEach(this.services, function(service, serviceName){\n        _.forEach(this.routes, function(route){\n\n          var routeHref = url.resolve(service, route.endpoint.route),\n              routeName = serviceName + '/' + route.name,\n              self = this;\n\n          requestHandler.setup(routeName, routeHref, route, self.requestAgent);\n        }, this);\n      }, this);\n\n      return this;\n    },\n    handleErrors: function(route){\n      var self = this;\n\n      route.runner.on('error', function(error){\n        debugHelper.log(format(settings.errorMessages.GENERIC_ERROR, error.details, error.message));\n\n        if(self.options.stopOnError) {\n          self.terminate(error.message);\n\t\t\t\t}\n      });\n    },\n    logCycleResults: function(route){\n      route.runner.on('cycle', function(message){\n        debugHelper.simpleLog(message);\n      });\n    },\n    logComparisonResult: function(route, callback){\n      route.runner.on('complete', function(results){\n\n        var multipleRoutes = _.has(results, '1');\n\n        if(multipleRoutes){\n          var fasterName = _.find(results, function(result){\n            return result.isFastest === true;\n          }).name;\n\n          debugHelper.log(format(settings.successMessages.FASTEST_ENDPOINT, fasterName));\n        }\n        callback(results);\n      });\n    },\n    logFinalComparisonResult: function(allResults){\n\n      var multipleServers = _.keys(allResults).length > 1;\n\n      if(multipleServers){\n        var fasterName = _.compact(_.map(allResults, function(result, key){\n          if(result.isFastest === true){\n            return key;\n\t\t\t\t\t}\n        }))[0];\n\n        debugHelper.simpleLog(format(settings.successMessages.FASTEST_SERVICE, fasterName));\n      }\n    },\n    onBenchResults: function(callback){\n      this.validate(validator.checkCallback, callback);\n      this.callback = callback;\n\n      var self = this,\n          resultsHandler = new ResultsHandler(this.services);\n\n      _.forEach(this.routes, function(route, i){\n\n        var isLast = (i === self.routes.length - 1),\n            next = self.processNextResult(isLast, resultsHandler);\n\n        self.handleErrors(route);\n        self.logCycleResults(route);\n        self.logComparisonResult(route, function(results){\n          resultsHandler.set(results, route.name);\n          next();\n        });\n      });\n\n      return this;\n    },\n    getErrorsFromResult: function(allResults){\n      var err = {},\n          areThereSomeErrors = false;\n\n      _.forEach(allResults, function(service, serviceName){\n        _.forEach(service, function(route, routeName){\n          if(route.errors && _.keys(route.errors).length > 0){\n            areThereSomeErrors = true;\n\n            if(!err[serviceName]) {\n              err[serviceName] = {};\n\t\t\t\t\t\t}\n\n            err[serviceName][routeName] = route.errors;\n          }\n        });\n      });\n      return areThereSomeErrors ? err : null;\n    },\n    processNextResult: function(isLast, resultsHandler){\n\n      var self = this;\n\n      return function(){\n        if(isLast && !self.callbackDone){\n          self.callbackDone = true;\n          var allResults = resultsHandler.get();\n          self.logFinalComparisonResult(allResults);\n          self.callback(self.getErrorsFromResult(allResults), allResults);\n        } else {\n\t\t\t\t\tself.runNext();\n\t\t\t\t}\n      };\n    },\n    runNext: function(){\n      if(!!this.routes && (this.routes.length) > 0 && !!this.routes[this.current]){\n        this.routes[this.current].runner.run();\n        this.current++;\n      }\n    },\n    setOptions: function(options){\n      this.options = sanitise.options(options);\n\n      if(!this.options.debug) {\n        debugHelper.shutUp();\n\t\t\t}\n\n      return this;\n    },\n    start: function(){\n      this.terminateIfNotValid();\n      this.current = 0;\n      this.runNext();\n    },\n    terminate: function(err){\n      this.error = err;\n      this.terminateIfNotValid();\n    },\n    terminateIfNotValid: function(){\n      if(!!this.error && !this.callbackDone){\n        this.callbackDone = true;\n        return this.callback(this.error, null);\n      }\n    },\n    validate: function(validateFn, input){\n      var validationResult = validateFn(input);\n\n      if(validationResult !== true){\n        this.error = validationResult;\n        return false;\n      }\n\n      return true;\n    }\n  });\n};","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/format.js":"'use strict';\n\nmodule.exports = function(format) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return format.replace(/{(\\d+)}/g, function(match, number) {\n    return typeof args[number] !== 'undefined'\n      ? args[number]\n      : match\n    ;\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/request-agent.js":"'use strict';\n\nvar _ = require('underscore');\n\nmodule.exports = function(agent){\n  this.agent = agent;\n\n  var evalIfFunction = function(variable){\n    return _.isFunction(variable) ? variable() : variable;\n  };\n\n  this.make = function(options, callback){\n    var data = evalIfFunction(options.data) || {},\n        query = evalIfFunction(options.query) || {},\n        headers = evalIfFunction(options.headers) || {},\n        method = options.method === 'delete' ? 'del' : options.method,\n        request = this.agent[method](options.url);\n\n    if(!_.isEmpty(data)) {\n      request.send(data);\n\t\t}\n\n    if(!_.isEmpty(query)) {\n      request.query(query);\n    }\n\n    _.forEach(headers, function(header, headerName){\n      request.set(headerName, header);\n    });\n\n    request.end(callback);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/request-handler.js":"'use strict';\n\nvar format = require('./format');\nvar settings = require('./settings');\nvar _ = require('underscore');\n\nmodule.exports = {\n  make: function(req, suite, suiteName, requestAgent, callback){\n    requestAgent.make(req, function(err, response){\n\n      var res = !!response ? {\n        header: response.header,\n        statusCode: response.statusCode,\n        body: response.text,\n        type: response.type\n      } : false;\n\n      if(err && !res){\n        var code = err.code || 'Unknown';\n\n        return callback({\n          code: code,\n          message: err.message || code\n        }, res);\n      }\n      else if(!!suite.endpoint.expectedStatusCode && suite.endpoint.expectedStatusCode !== response.status) {\n        return callback({\n          code: settings.errorCodes.HTTP_STATUS_CODE_NOT_MATCHING,\n          message: format(settings.errorMessages.HTTP_STATUS_CODE_NOT_MATCHING, suite.endpoint.expectedStatusCode, response.status, suiteName)\n        }, res);\n\t\t\t}\n      else {\n\t\t\t\tcallback(null, res);\n\t\t\t}\n    });\n  },\n  setup: function(suiteName, suiteHref, suite, requestAgent){\n    var self = this,\n        req = _.extend(_.clone(suite.endpoint), { url: suiteHref }),\n        suiteOptions = {\n          expectedStatusCode: suite.endpoint.expectedStatusCode,\n          maxMean: suite.endpoint.maxMean,\n          maxSingleMean: suite.endpoint.maxSingleMean,\n          method: suite.endpoint.method\n        },\n        suiteRequest = {};\n\n    if(!!suite.endpoint.headers){\n      suiteRequest.headers = _.isFunction(suite.endpoint.headers) ? 'Dynamic headers' : suite.endpoint.headers;\n\t\t}\n\n    if(!!suite.endpoint.data){\n      suiteRequest.data = _.isFunction(suite.endpoint.data) ? 'Dynamic data' : suite.endpoint.data;\n\t\t}\n\n    if(!!suite.endpoint.query){\n      suiteRequest.query = _.isFunction(suite.endpoint.query) ? 'Dynamic query' : suite.endpoint.query;\n    }\n\n    suite.runner.add(suiteName, suiteHref, suiteOptions, suiteRequest, function(done){\n      self.make(req, suite, suiteName, requestAgent, done);\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/settings.js":"'use strict';\n\nmodule.exports = {\n  errorCodes: {\n    HTTP_STATUS_CODE_NOT_MATCHING: 'httpStatusCodeNotMatching',\n    MAX_MEAN_EXCEEDED: 'maxMeanExceeded',\n    MAX_SINGLE_MEAN_EXCEEDED: 'maxSingleMeanExceeded'\n  },\n  errorMessages: {\n    GENERIC_ERROR: 'An error occurred while benchmarking {0}: {1}',\n    HTTP_STATUS_CODE_NOT_MATCHING: 'Expected Status code was {0} but I got a {1} for {2}',\n    MAX_MEAN_EXCEEDED: 'Mean should be below {0}',\n    MAX_SINGLE_MEAN_EXCEEDED: 'Mean across all concurrent requests should be below {0}',\n    VALIDATION_CALLBACK: 'Callback argument is not valid',\n    VALIDATION_ENDPOINTS: 'Endpoints argument is not valid',\n    VALIDATION_ENDPOINT_VERB: 'Endpoints argument is not valid - found an unsupported http verb',\n    VALIDATION_SERVICES: 'Services argument is not valid'\n  },\n  successMessages: {\n    FASTEST_ENDPOINT: 'Fastest is {0}',\n    FASTEST_SERVICE: 'Fastest Service is {0}',\n    CYCLE_MESSAGE: '{0} x {1} ops/sec {2}% ({3} run{4} sampled)'\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/results-handler.js":"'use strict';\n\nvar benchmarkUtils = require('./benchmark-utils');\nvar _ = require('underscore');\n\nmodule.exports = function(services){\n\n  this.results = {};\n  this.serviceNames = [];\n\n  _.forEach(services, function(v, k){\n    this.results[k] = {};\n    this.serviceNames.push(k);\n  }, this);\n\n  return _.extend(this, {\n    set: function(benchmarks, currentName) {\n      _.forEach(benchmarks, function(benchmark, k){\n        if(this.results[this.serviceNames[k]]){\n          this.results[this.serviceNames[k]][currentName] = benchmark;\n        }\n      }, this);\n    },\n    get: function(){\n      var averages = benchmarkUtils.getAverage(this.results);\n\n      if(averages.length > 1){\n        this.results[averages[0].name].isFastest = true;\n        this.results[averages[averages.length - 1].name].isSlowest = true;\n      }\n\n      return this.results;\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/benchmark-utils.js":"'use strict';\n\nvar format = require('./format');\nvar settings = require('./settings');\nvar _ = require('underscore');\n\nvar benchmarkUtils = {\n  getAverage: function(benchmarks){\n    return _.compose(benchmarkUtils.sort, benchmarkUtils.getSuccessful, benchmarkUtils.getBenchmarksAverage)(benchmarks);\n  },\n  getBenchmarkAverage: function(benchmark, benchmarkName){\n    var stats = benchmarkUtils.getStats(benchmark),\n        av = benchmarkUtils.getFieldAverage;\n\n    return {\n      name: benchmarkName,\n      stats: {\n        moe: av(stats, 'moe'),\n        rme: av(stats, 'rme'),\n        deviation: av(stats, 'deviation'),\n        variance: av(stats, 'variance'),\n        mean: av(stats, 'mean'),\n        sem: av(stats, 'sem'),\n        p75: av(stats, 'p75'),\n        p95: av(stats, 'p95'),\n        p99: av(stats, 'p99'),\n        p999: av(stats, 'p999')\n      },\n      hz: av(benchmark, 'hz')\n    };\n  },\n  getBenchmarksAverage: function(benchmarks){\n    return  _.map(benchmarks, function(benchmark, benchmarkName){\n      return benchmarkUtils.getBenchmarkAverage(benchmark, benchmarkName);\n    });\n  },\n  getFieldAverage: function(benchmarks, propertyName){\n    var valuesArray = _.pluck(benchmarks, propertyName);\n    return _.reduce(valuesArray, function(memo, num){\n      return memo + num;\n    }, 0) / valuesArray.length;\n  },\n\n  getDeviation: function(variance){\n    return Math.sqrt(variance);\n  },\n  getHz: function(singleMean){\n    return 1/singleMean;\n  },\n  getSingleMean: function(mean, concurrencyLevel){\n    // Mean across all concurrent requests.\n    // Should represent the mean for each single request in a multi-concurrent context.\n\n    return mean/concurrencyLevel;\n  },\n  getMean: function(samples){\n    return _.reduce(samples, function(memo, num){\n      return memo + num;\n    }, 0) / samples.length;\n  },\n  getMoe: function(samples, sem){\n    /**\n     * T-Distribution two-tailed critical values for 95% confidence\n     * http://www.itl.nist.gov/div898/handbook/eda/section3/eda3672.htm\n     */\n    var tTable = {\n      '1':  12.706,'2':  4.303, '3':  3.182, '4':  2.776, '5':  2.571, '6':  2.447,\n      '7':  2.365, '8':  2.306, '9':  2.262, '10': 2.228, '11': 2.201, '12': 2.179,\n      '13': 2.16,  '14': 2.145, '15': 2.131, '16': 2.12,  '17': 2.11,  '18': 2.101,\n      '19': 2.093, '20': 2.086, '21': 2.08,  '22': 2.074, '23': 2.069, '24': 2.064,\n      '25': 2.06,  '26': 2.056, '27': 2.052, '28': 2.048, '29': 2.045, '30': 2.042,\n      'infinity': 1.96\n    };\n\n    var critical = tTable[Math.round(samples.length - 1) || 1] || tTable.infinity;\n    return sem * critical;\n  },\n  getPercentile: function(samples, ptile){\n    var values = _.clone(samples).sort(function (a, b) { return a - b; }),\n        pos = ptile * (values.length + 1);\n\n    if (pos < 1) {\n      return values[0];\n    } else if (pos >= values.length) {\n      return values[values.length - 1];\n    } else {\n      var lower = values[Math.floor(pos) - 1];\n      var upper = values[Math.ceil(pos) - 1];\n\n      return lower + (pos - Math.floor(pos)) * (upper - lower);\n    }\n  },\n  getRme: function(moe, mean){\n    return (moe / mean) * 100 || 0;\n  },\n  getSem: function(samples, deviation){\n    return deviation / Math.sqrt(samples.length);\n  },\n  getVariance: function(samples, mean){\n    return _.reduce(samples, function(sum, x) {\n      return sum + Math.pow(x - mean, 2);\n    }, 0) / (samples.length - 1) || 0;\n  },\n\n  getRelevantFields: function(benchmark){\n\n    var __ = benchmarkUtils,\n        stats = {};\n\n    var result = {\n      name: benchmark.name,\n      href: benchmark.href,\n      stats: {\n        sample: benchmark.stats.sample\n      },\n      errors: benchmark.errors,\n      options: benchmark.options,\n      request: benchmark.request,\n      response: benchmark.response\n    };\n\n    stats.mean = __.getMean(benchmark.stats.sample);\n    stats.singleMean = __.getSingleMean(stats.mean, benchmark.options.concurrencyLevel);\n    result.hz = __.getHz(stats.singleMean);\n    stats.variance = __.getVariance(benchmark.stats.sample, stats.mean);\n    stats.deviation = __.getDeviation(stats.variance);\n    stats.sem = __.getSem(benchmark.stats.sample, stats.deviation);\n    stats.moe = __.getMoe(benchmark.stats.sample, stats.sem);\n    stats.rme = __.getRme(stats.moe, stats.mean);\n    stats.p75 = __.getPercentile(benchmark.stats.sample, 0.75);\n    stats.p95 = __.getPercentile(benchmark.stats.sample, 0.95);\n    stats.p99 = __.getPercentile(benchmark.stats.sample, 0.99);\n    stats.p999 = __.getPercentile(benchmark.stats.sample, 0.999);\n\n    result.stats = _.extend(result.stats, stats);\n\n    return result;\n  },\n  getStats: function(benchmarks){\n    return _.map(benchmarks, function(benchmark){\n      return benchmark.stats;\n    });\n  },\n  getSuccessful: function(benchmarks){\n    return _.filter(benchmarks, function(benchmark){\n      return isFinite(benchmark.hz);\n    });\n  },\n  sort: function(benchmarks){\n    return _.sortBy(benchmarks, function(benchmark){\n      return benchmark.stats.mean + benchmark.stats.moe;\n    });\n  },\n  cycleMessage: function(benchmark) {\n\n    var formatNumber = function(number) {\n      number = String(number).split('.');\n      return number[0].replace(/(?=(?:\\d{3})+$)(?!\\b)/g, ',') + (number[1] ? '.' + number[1] : '');\n    };\n\n    var hz = benchmark.hz,\n        stats = benchmark.stats,\n        size = stats.sample.length,\n        pm = '\\xb1';\n\n    return format(settings.successMessages.CYCLE_MESSAGE,\n                  benchmark.name,\n                  formatNumber(hz.toFixed(hz < 100 ? 2 : 0)),\n                  pm + stats.rme.toFixed(2),\n                  size,\n                  (size === 1 ? '' : 's'));\n  }\n};\n\nmodule.exports = benchmarkUtils;\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/runner.js":"'use strict';\n\nvar benchmarkUtils = require('./benchmark-utils');\nvar EventsHandler = require('events').EventEmitter;\nvar format = require('./format');\nvar giveMe = require('give-me');\nvar settings = require('./settings');\nvar Timer = require('./timer.js');\nvar _ = require('underscore');\n\nmodule.exports = function(options){\n\n  this.steps = [];\n  this.results = [];\n  this.options = options;\n\n  this.add = function(stepName, href, stepOptions, stepRequest, func){\n\n    var self = this,\n        callbackDone = false,\n        isSequence = !self.options.runMode || (self.options.runMode === 'sequence'),\n        maxConcurrent = isSequence ? 1 : self.options.maxConcurrentRequests,\n        totalRequests = self.options.minSamples,\n        cycleLength = (maxConcurrent && (totalRequests > maxConcurrent)) ? maxConcurrent : totalRequests,\n        cycleDelay = isSequence ? self.options.delay : 0,\n        globalTimer = new Timer(),\n        sampled = 0,\n        i = 0;\n\n    var step = {\n      name: stepName,\n      func: func,\n      href: href,\n      stats: {\n        sample: []\n      },\n      errors: {},\n      options: _.extend(stepOptions, {\n        concurrencyLevel: maxConcurrent\n      }),\n      request: stepRequest\n    };\n\n    step.run = function(callback){\n\n      var runNextSample;\n\n      var sampleDone = function(sample, pos, err){\n        if(!callbackDone){\n\n          var currentGlobalTime = self.getCurrentTime(globalTimer, isSequence),\n              maxTime = self.options.maxTime;\n\n          step.stats.sample[pos] = sample;\n          sampled++;\n\n          if(err){\n            if(!step.errors[err.code]){\n              step.errors[err.code] = [];\n\t\t\t\t\t\t}\n\n            step.errors[err.code].push(_.extend(err, { pos: pos }));\n          }\n\n          if(totalRequests > i && (currentGlobalTime < maxTime)){\n            if(cycleDelay > 0) {\n              setTimeout(runNextSample, cycleDelay);\n\t\t\t\t\t\t}\n            else {\n              runNextSample();\n\t\t\t\t\t\t}\n          } else if(sampled === totalRequests || currentGlobalTime >= maxTime) {\n            step.options.end = new Date();\n            callbackDone = true;\n            callback(self.addResult(step));\n          }\n        }\n      };\n\n      runNextSample = function(){\n        if(isSequence) {\n          globalTimer.start();\n        }\n        self.runSample(step, sampleDone, i);\n        i++;\n      };\n\n      globalTimer.start();\n      step.options.start = new Date();\n\n      for(i = 0; i < cycleLength; i++) {\n        (self.runSample)(step, sampleDone, i);\n\t\t\t}\n    };\n    this.steps.push(step);\n  };\n\n  this.runSample = function(step, next, i){\n    var self = this,\n        timer = new Timer();\n\n    timer.start();\n    step.func(function(err, response){\n      timer.stop();\n\n      if(err) {\n        self.emit('error', _.extend(_.clone(err), {\n          details: step.href + ' (' + i + ')'\n        }));\n\t\t\t}\n\n      if(!step.response) {\n        step.response = response;\n\t\t\t}\n\n      next(timer.time, i, err);\n    });\n  };\n\n  this.getCurrentTime = function(timer, isSequence){\n    if(isSequence){\n      timer.stop();\n      return timer.time;\n    }\n    return timer.get();\n  };\n\n  this.addResult = function(step){\n    step.stats.sample = _.filter(step.stats.sample, function(item){\n      return _.isNumber(item);\n    });\n\n    var result = benchmarkUtils.getRelevantFields(_.pick(step, 'name', 'href', 'stats', 'errors', 'options', 'request', 'response')),\n\t\t\t\tmaxMeanErr,\n\t\t\t\tmaxSingleMeanErr;\n\n    if(!!step.options.maxMean && (result.stats.mean > step.options.maxMean)){\n      maxMeanErr = {\n        code: settings.errorCodes.MAX_MEAN_EXCEEDED,\n        details: step.name,\n        message: format(settings.errorMessages.MAX_MEAN_EXCEEDED, step.options.maxMean)\n      };\n\n      this.emit('error', maxMeanErr);\n\n      if(!result.errors[settings.errorCodes.MAX_MEAN_EXCEEDED]) {\n        result.errors[settings.errorCodes.MAX_MEAN_EXCEEDED]=[];\n\t\t\t}\n\n      result.errors[settings.errorCodes.MAX_MEAN_EXCEEDED].push(maxMeanErr);\n    }\n\n    if(!!step.options.maxSingleMean && (result.stats.singleMean > step.options.maxSingleMean)){\n      maxSingleMeanErr = {\n        code: settings.errorCodes.MAX_SINGLE_MEAN_EXCEEDED,\n        details: step.name,\n        message: format(settings.errorMessages.MAX_SINGLE_MEAN_EXCEEDED, step.options.maxSingleMean)\n      };\n\n\t\t\tthis.emit('error', maxSingleMeanErr);\n\n      if(!result.errors[settings.errorCodes.MAX_SINGLE_MEAN_EXCEEDED]) {\n        result.errors[settings.errorCodes.MAX_SINGLE_MEAN_EXCEEDED]=[];\n\t\t\t}\n\n      result.errors[settings.errorCodes.MAX_SINGLE_MEAN_EXCEEDED].push(maxSingleMeanErr);\n    }\n\n    this.results.push(result);\n    this.emit('cycle', benchmarkUtils.cycleMessage(result));\n    return step;\n  };\n\n  this.run = function(){\n    var self = this;\n\n    giveMe.sequence(_.map(this.steps, function(step){ return step.run; }), function(callbacks){\n\n      var results = {};\n      _.forEach(self.results, function(result, i){ results[i] = result; });\n\n      var sorted = _.compose(benchmarkUtils.sort, benchmarkUtils.getSuccessful)(results);\n\n      if(sorted.length > 1){\n        _.find(results, function(result){ return result.name === sorted[0].name; }).isFastest = true;\n        _.find(results, function(result){ return result.name === sorted[sorted.length - 1].name; }).isSlowest = true;\n      }\n\n      self.emit('complete', results);\n    });\n  };\n\n  return _.extend(this, new EventsHandler());\n};\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/timer.js":"'use strict';\n\nmodule.exports = function(){\n  this.time = 0;\n  this.nanoseconds = process && process.hrtime;\n\n  this.get = function(){\n    if(this.nanoseconds){\n      var now = process.hrtime(this.startTime);\n      return now[0] + now[1] / 1e9;\n    } else {\n\t\t\treturn (new Date() - this.startTime) / 1000;\n\t\t}\n  };\n\n  this.start = function(){\n    this.startTime = this.nanoseconds ? process.hrtime() : new Date();\n  };\n\n  this.stop = function(){\n    this.time += this.get();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-api-benchmark/node_modules/api-benchmark/lib/validator.js":"'use strict';\n\nvar settings = require('./settings');\nvar _ = require('underscore');\n\nmodule.exports = {\n  checkEndpoints: function(endpoints){\n    if(!endpoints || !_.isObject(endpoints) || _.isArray(endpoints) || _.keys(endpoints).length < 1) {\n      return (settings.errorMessages.VALIDATION_ENDPOINTS);\n\t\t}\n\n    var methods = _.map(endpoints, function(endpoint){\n      return _.isString(endpoint) ? 'get' : (endpoint.method || 'get');\n    });\n\n    if(_.without(methods, 'get', 'post', 'put', 'head', 'patch', 'delete', 'trace', 'options').length > 0) {\n      return (settings.errorMessages.VALIDATION_ENDPOINT_VERB);\n\t\t}\n\n    return true;\n  },\n  checkServices: function(services){\n    if(!services || !_.isObject(services) || _.isArray(services) || _.keys(services).length < 1) {\n      return (settings.errorMessages.VALIDATION_SERVICES);\n\t\t}\n\n    return true;\n  },\n  checkCallback: function(callback){\n    if(!callback || !_.isFunction(callback)){\n      throw new Error(settings.errorMessages.VALIDATION_CALLBACK);\n\t\t}\n\n    return true;\n  }\n};\n"}